Main files include: MergeBuilder.cpp, LF_Merge.cpp,Path.py, DynamicMerging.py, BaselineMerging.py

Path.py file 
Create two new paths using segments and arcs 
Loop around roundabout and square loop into and exiting roundabout 
Create new controls zone using segments and arcs 
In path files, we create Control zones for each path using the “AppendControlBorder” function  
#act_ty action type #act_ty: 0->Starting of a control zone 1->starting of a merge  2->(end of the control zone )(exit the merge)
#cid control id. for example cid for the mergsim is 0 , and for intersection scenario, since we have two cz in intersim is 1 and 2(0 is already used for mergsim) .
#eid id of groups which are entering to the cz(Control type)
# if we have two action types in a same segment, it should be writen in order ex.-> 2 1 0
position of xhalfplane (place where merging happens),postion ofyhalfplane,true if you want > x half plane value,true if you want > y half plane value)
An array for segments and an index = 0
AppendSegment adds a segment to the segments array
GetSegmentID(x,y) returns -1 if the path is empty (segments has a length of 0) or GetDefaultPath(index) res= Path()
If index = 0 {some path is created using appendsegment}

Mergebuilder.cpp
This file creates segments of control zones, by making an instance of a ControlZone class that can be used in LF_merge
Create new control zone type ControlZone* z4 = new ControlZone(0);

LF_Merge.cpp 
Const double RESET_TH =2.9 (if the time the car has to reach the merge is less than RESET_TH time, then it must travel too fast so the queue is reset. If we have a different CZ length, we must verify that this value is still optimal and fits the simulation)
LF_Merge “activates” merging zones from MergeBuilder classes, and uses MergeBuilder’s .BuildMerge() function. 
L is the length of the control zone in meters
S is the length of the merging zone in meters
Delta is the “safety stance” 

BaselineMerging.py
Initial Positions of vehicles
Creates array inMerge and int numRobots for use in checkMerge
CheckMerge
Takes index (vehicle number), status (path.GetSegmentID) and position
Checks whether each vehicle is in a certain predefined lx and y range to stop, and then if it is, inMerge[index] will become 1
Returns inMerge whereever called
ZumoThread
This is what is initialized at the end of the file, and we have multiple running at the same time, one per vehicle
Initialization: sets x and y from posx and posy, sets road speed limit, also records time that program is run in cur_t
while(isRun)
Temp_t records the current time of this iteration of the loop
x is set to the previous x plus dx*speed*(time since program started), which keeps advancing as the time increases
X and y are both calculated for the given time instant, and then posx and posy are updated
resp is a ros object which creates a usable vector of x and y and each vehicles path (it connects to Path.py through ROS) res is from Path.py
After resp is made, inMerge runs checkmerge to see whos in the merging zone by checking something from res?
Control Logic/Final Conditionals
If the car is on a certain segment, or in a certain x y range, and there are others inWaiting, set the speed to zero and wait 
Conlcusion: Speed is set to zero based on inWaiting, and it resets it's road speed based on (“not np.sum(inMerge)>0 if there is anyone else in the merge zone
time.sleep(controlRate) determines how often this code updates speeds, by suspending execution for controlRate # of seconds

DynamicMerging.py
Cars start on upper straight and follow path 39 and cars start on rounadbout and follow path 48
They dynamically merge into the eastern roundabout on the UD scaled city. So this project was centered around the dynamic merging of CAVs (connected, automated vehicles) into a roundabout. 
The central way the algorithm works is by defining a control zone where vehicles adjust their velocity to accommodate each other by minimizing acceleration and deceleration and maintaining a safety distance. 
The merging zone where the cars actually merge into the roundabout and they move at a constant velocity. 
My software is structured to have two "paths", one going around the roundabout and another path that takes the cars from one roundabout to another and back.
Intial Postions and indexes for the cars 
Talker and RT_Control are for the VICON and ROS frameworks and they allow the cars to communicate with each other and the sensors
Animate creates a simulation for testing the software 
ZumoThread contains the control logic from the paper 
The threads at the bottom contain the paths for the cars 

Files in folders are dependencies and have not been created or modified by me  
